{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","htmlFor","id","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,uBAAMC,SAVW,SAAAC,GACjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC/BR,GAAc,SAAAS,GAAU,OAAIP,GAAJ,mBAAmBO,OAC3CN,EAAc,MAKd,UACI,uBAAOO,QAAQ,SAAf,oBACA,uBACIC,GAAG,SACHC,KAAK,OACLC,MAAOX,EACPY,SApBc,SAAAT,GACtBF,EAAcE,EAAEU,OAAOF,c,+BCPlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAWH,GAF9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRiB,MAAOD,EAAIC,MACXT,IAAG,UAAEQ,EAAIE,cAAN,aAAE,EAAYC,iBAAiBX,QAVvB,kBAcZM,GAdY,4CAAH,sDCEPM,EAAc,SAAC,GAAuB,EAApBpB,GAAqB,IAAlBiB,EAAiB,EAAjBA,MAAMT,EAAW,EAAXA,IAEpC,OACI,sBAAKa,UAAU,0CAAf,UACI,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAErB,ECHwB,SAAEA,GAC1B,MAA0BhB,mBAAS,CAC/BuB,KAAK,GACLY,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAU,WACNvB,EAAQC,GACPuB,MAAK,SAAAC,GACFH,EAAS,CACLd,KAAMiB,EACNL,SAAQ,SAIjB,CAAEnB,IAGEoB,EDfyBK,CAAazB,GAAjCY,EAAZ,EAAOL,KAAaY,EAApB,EAAoBA,QAIpB,OACI,qCACI,oBAAIJ,UAAU,qCAAd,SAAqDf,IAEpDmB,GAAW,mBAAGJ,UAAU,kCAAb,wBAEZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOH,KAAI,SAAAC,GAAG,OACd,cAAC,EAAD,eAEIA,GADCA,EAAIhB,aEQdgC,EAxBM,WAEjB,MAAoC1C,mBAAS,IAA7C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OACI,qCACC,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEQS,EAAWiB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAGDA,SAAWA,GADNA,QAKhB,kF,MChBT2B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.39b4efc6.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState(\"\")\n    const handleInputChange = e =>{\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = e =>{\n        e.preventDefault();\n\n        if( inputValue.trim().length > 0){\n        setCategories(categories=>[ inputValue, ...categories ])\n        setInputValue(\"\")\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <label htmlFor=\"search\">Search</label>\n            <input \n                id=\"search\"\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n                 />\n        </form>\n    )\n}\n\n    AddCategory.propTypes = {\n        setCategories: PropTypes.func.isRequired\n    };\n\n","export const getGifs = async(category) =>{\n\n    const url= `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=PjM4VV6isRsdUXWM3IkSSMWExi75Z3Fw`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(img =>{\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( { id,title,url } ) => {\n\n    return (\n        <div className=\"card animate__bounceIn animate_animated\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","//import React, {useState, useEffect} from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    const {data:images, loading } = useFetchGifs(category);\n\n\n\n    return (\n        <>\n            <h3 className=\"animate_animated animate__fadeInUp\">{ category }</h3>\n\n            {loading && <p className=\"animate_animated animate__flash\">Loading...</p>}\n\n            <div className=\"card-grid\">\n                    {\n                    images.map(img => \n                    <GifGridItem \n                    key={img.id}\n                    {...img}\n                    />)\n    }\n        </div>\n         </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = ( category ) =>{\n    const [state, setState] = useState({\n        data:[],\n        loading:true\n    })\n\n    useEffect(() => {\n        getGifs(category)\n        .then(imgs =>{\n            setState({\n                data: imgs,\n                loading:false\n            })\n            }\n        )\n    }, [ category ]);\n \n\n    return state;\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState([]);\n\n    return (\n        <>\n         <h2>GifExpertApp</h2>\n         <AddCategory setCategories={ setCategories }/>\n         <hr />  \n         <ol>\n             {\n                 categories.map(category => \n                  (  <GifGrid \n                    \n                    key={category}\n                    category={ category }/>\n                 ))\n             }\n         </ol>\n         <p>samuelmindler tech industres billionaire shit</p>\n        </>\n    )\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}